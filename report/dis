本文设计的C-to-Python转译器的评估测试分为三个部分：语法分析测试，语义分析测试和Python代码生成测试。语法分析测试涉及使用一组测试用例来评估转译器能否能够正确地检测语法错误，以正确生成AST语法树；语义分析测试涉及使用一组测试用例来评估转译器能否能够正确地检测语义错误和类型错误，并进行类型检查和类型推断；Python代码生成测试涉及使用另一组测试用例来评估翻译器是否能够生成有效的Python代码，且该代码与原始C代码的功能相同。设计的测试用例尽可能包括各种不同的语法结构，以确保完备的对转译器进行测试,测试用例见github/better-712/com\_project.git.

\subsection{语法分析测试}
为了测试语法分析能根据文法规则生成语法树并检测不正确语法，本文设计了一组20个测试用例来对其进行测试，测试主要方面在于ANSI C语法标准，从基本的符号如;,.正确使用，到多个循环体声明以及嵌套下括号的正确使用(),[],\{\},以及一些具体的ANSI C语法，如ANSI C语法不允许在声明全局变量处进行赋值，只能在函数体或结构体内进行赋值，基本涵盖了标准语法，测试结果均与预期结果相符，转译器能够准确识别代码语法错误并返回错误原因，部分测试用例具体报错位置会存在一些偏差，这是由于语法编写时选取返回位置节点的不同，如缺失\}会在其对应\{处报错。


\subsection{语义分析测试}

为了验证转译器能够正确地检测语义错误和类型错误，本文设计了一组30个语义分析测试用例。测试用例包括各种类型的C语言代码，例如基本类型、数组、结构体等。测试程序中故意添加了一些语义错误和类型错误，例如使用未声明的变量、类型不匹配的赋值操作等。其中10个用例用来检测变量，函数体等未定义调用或重复定义等定义声明问题，10个用例用来检测类型匹配问题，如表达式操作符和操作数的正确匹配，函数声明返回值和return返回类型等，后10个用例则用来涵盖其它语义错误，包括参数错误（调用函数参数个数错误），break等不在循环体或if结构体内调用等情况。测试结果表明，转译器在大多数情况下能够正确地检测语义错误和类型错误，并进行类型检查和类型推断，不过转译器仍存在漏报错误或报告错误的位置不准确的问题，这可能与语义分析算法设计中不完善的部分有关，需要对语义分析进一步完善。


\subsection{Python代码生成测试}

为了测试转译器能够正确地将C语言代码转换为等效的Python代码，本文设计了一组25个代码生成测试用例，该测试用例除基本的C语言代码外，特别留意C语言和python差异部分的转换，如c语言结构体struct转换为python的类，for循环体，if-else if结构体的转换。测试用例中15个用来检测类型转换，结构体转换等基础问题，来检测基本类型结构的转换是否有缺陷，另外10个用来转换一些逻辑性的C语义代码，来测试转换后python代码逻辑输出是否与C代码相同。将测试用例通过C-to-Python转译器将测试程序转换为Python代码后，将Python代码运行并检查输出和返回值，测试结果表明类型和结构转换的测试用例能良好完成代码转换功能，但在逻辑输出上，测试用例转换为python代码后的输出和源代码输出存在差异，甚至部分无法运行，以二分查找为例，python代码计算中间数时进行的除法会返回浮点数，而这会对后面比较数组中元素大小产生重大影响，其导致数组下标非整数；又如C语言for循环转换为python for i in range()，在C语言中允许对循环变量i进行修改，进行影响循环过程，而python对i的修改不会影响循环进程，因此调用for循环并修改循环变量的C源代码，其python转换代码并不能输出相同结果，而这是C与python不同特性导致，在设计上也很难进行消除。测试结果表明，经过良好设计后，测试用例转换成功率能够达到100\%，但语义错误率却无法降低至0\%，这是转换不可避免的结果。
