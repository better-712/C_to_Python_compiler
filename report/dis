本研究旨在将C语言代码转译为Python代码，以实现代码的迁移和跨平台支持，简化代码的维护和开发，并为程序开发带来多种好处。然而，由于C语言和Python语言之间存在语法和语义的差异，将C代码转译为Python代码是一项具有挑战性的任务。为了解决这个问题，本文设计和实现了一个C到Python转译器，具有一定的优势和局限性。转译器能够将大部分合法的ANSI C标准代码转译为等效的Python代码，并保留原始代码的功能和逻辑。然而，由于C和Python之间的差异，某些特定的C语言特性可能无法完全转译或需要手动调整。此外，目前转译器还不支持较新C语言标准如C11等，需要进一步改进和开发。通过实验评估，我们分别测试了语法分析、语义分析和Python代码生成的性能。结果显示，转译器能够正确地检测语法和语义错误，然而，在某些情况下，转译器可能无法完全保持逻辑输出与原始C代码的一致性,这是由于C和Python之间的语义和执行差异所导致的.未来的工作可以进一步改进转译器的功能，提高转译器在处理python语言特性和逻辑转换方面的准确性和可靠性，并支持更多的C语言标准,以满足更广泛的应用需求。


This study aims to transcompile C language code into Python code, with the goal of facilitating code migration and cross-platform support, simplifying code maintenance and development, and providing various benefits to software development. However, transcompiling C code into Python presents a significant challenge due to the syntax and semantic differences between the two languages. To address this challenge, this paper presents the design and implementation of a C-to-Python transcompiler, which offers certain advantages and limitations. The transcompiler is capable of converting the majority of valid ANSI C standard code into equivalent Python code while preserving the functionality and logic of the original code. However, due to the inherent differences between C and Python, certain specific C language features may not be entirely translatable or may require manual adjustments during the conversion process. Furthermore, the current transcompiler does not support newer C language standards, such as C11, and further improvements and developments are necessary in this regard. Experimental evaluations were conducted to assess the performance of syntax analysis, semantic analysis, and Python code generation. The results demonstrate that the transcompiler accurately detects syntax and semantic errors. However, in certain scenarios, it may not fully maintain logical output consistency with the original C code, which can be attributed to the semantic and execution disparities between C and Python. Future work should focus on enhancing the functionality of the transcompiler, improving its accuracy and reliability in handling Python language features and logical transformations, and expanding its support for a broader range of C language standards to meet more extensive application requirements.
